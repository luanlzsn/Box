//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `圆子盒用户服务及免责条款.doc`.
    static let 圆子盒用户服务及免责条款Doc = Rswift.FileResource(bundle: R.hostingBundle, name: "圆子盒用户服务及免责条款", pathExtension: "doc")
    
    /// `bundle.url(forResource: "圆子盒用户服务及免责条款", withExtension: "doc")`
    static func 圆子盒用户服务及免责条款Doc(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.圆子盒用户服务及免责条款Doc
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 54 images.
  struct image {
    /// Image `about_icon`.
    static let about_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "about_icon")
    /// Image `add_photo`.
    static let add_photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "add_photo")
    /// Image `address_icon`.
    static let address_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "address_icon")
    /// Image `alipay_icon-1`.
    static let alipay_icon1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "alipay_icon-1")
    /// Image `alipay_icon`.
    static let alipay_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "alipay_icon")
    /// Image `avater_default`.
    static let avater_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "avater_default")
    /// Image `calendar`.
    static let calendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "calendar")
    /// Image `clock_icon`.
    static let clock_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "clock_icon")
    /// Image `commission`.
    static let commission = Rswift.ImageResource(bundle: R.hostingBundle, name: "commission")
    /// Image `course_image`.
    static let course_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "course_image")
    /// Image `delete_image`.
    static let delete_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "delete_image")
    /// Image `diamond_black`.
    static let diamond_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "diamond_black")
    /// Image `diamond_blue`.
    static let diamond_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "diamond_blue")
    /// Image `diamond_gray`.
    static let diamond_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "diamond_gray")
    /// Image `diamond_red`.
    static let diamond_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "diamond_red")
    /// Image `diamond_yellow`.
    static let diamond_yellow = Rswift.ImageResource(bundle: R.hostingBundle, name: "diamond_yellow")
    /// Image `down_arrow`.
    static let down_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "down_arrow")
    /// Image `extract_icon`.
    static let extract_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "extract_icon")
    /// Image `eye_close`.
    static let eye_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "eye_close")
    /// Image `eye_open`.
    static let eye_open = Rswift.ImageResource(bundle: R.hostingBundle, name: "eye_open")
    /// Image `home_eight`.
    static let home_eight = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_eight")
    /// Image `home_five`.
    static let home_five = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_five")
    /// Image `home_four`.
    static let home_four = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_four")
    /// Image `home_icon_select`.
    static let home_icon_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_icon_select")
    /// Image `home_icon`.
    static let home_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_icon")
    /// Image `home_nine`.
    static let home_nine = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_nine")
    /// Image `home_one`.
    static let home_one = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_one")
    /// Image `home_seven`.
    static let home_seven = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_seven")
    /// Image `home_six`.
    static let home_six = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_six")
    /// Image `home_three`.
    static let home_three = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_three")
    /// Image `home_two`.
    static let home_two = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_two")
    /// Image `mine_icon_select`.
    static let mine_icon_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "mine_icon_select")
    /// Image `mine_icon`.
    static let mine_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "mine_icon")
    /// Image `mine_password_icon`.
    static let mine_password_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "mine_password_icon")
    /// Image `nav_back`.
    static let nav_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "nav_back")
    /// Image `notice_icon`.
    static let notice_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "notice_icon")
    /// Image `password_icon`.
    static let password_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "password_icon")
    /// Image `phone_icon`.
    static let phone_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "phone_icon")
    /// Image `qr_code_bg`.
    static let qr_code_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "qr_code_bg")
    /// Image `qr_code_desc`.
    static let qr_code_desc = Rswift.ImageResource(bundle: R.hostingBundle, name: "qr_code_desc")
    /// Image `receive_task`.
    static let receive_task = Rswift.ImageResource(bundle: R.hostingBundle, name: "receive_task")
    /// Image `record_task`.
    static let record_task = Rswift.ImageResource(bundle: R.hostingBundle, name: "record_task")
    /// Image `right_arrow`.
    static let right_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "right_arrow")
    /// Image `select_icon`.
    static let select_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "select_icon")
    /// Image `setup_icon`.
    static let setup_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "setup_icon")
    /// Image `submit_task`.
    static let submit_task = Rswift.ImageResource(bundle: R.hostingBundle, name: "submit_task")
    /// Image `task_green`.
    static let task_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "task_green")
    /// Image `task_icon_select`.
    static let task_icon_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "task_icon_select")
    /// Image `task_icon`.
    static let task_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "task_icon")
    /// Image `task_image`.
    static let task_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "task_image")
    /// Image `team_con`.
    static let team_con = Rswift.ImageResource(bundle: R.hostingBundle, name: "team_con")
    /// Image `unselect_icon`.
    static let unselect_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "unselect_icon")
    /// Image `user_icon`.
    static let user_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "user_icon")
    /// Image `weChat_icon`.
    static let weChat_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "weChat_icon")
    
    /// `UIImage(named: "about_icon", bundle: ..., traitCollection: ...)`
    static func about_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.about_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "add_photo", bundle: ..., traitCollection: ...)`
    static func add_photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_photo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "address_icon", bundle: ..., traitCollection: ...)`
    static func address_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.address_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "alipay_icon", bundle: ..., traitCollection: ...)`
    static func alipay_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alipay_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "alipay_icon-1", bundle: ..., traitCollection: ...)`
    static func alipay_icon1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alipay_icon1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "avater_default", bundle: ..., traitCollection: ...)`
    static func avater_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avater_default, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "calendar", bundle: ..., traitCollection: ...)`
    static func calendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calendar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "clock_icon", bundle: ..., traitCollection: ...)`
    static func clock_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clock_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "commission", bundle: ..., traitCollection: ...)`
    static func commission(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commission, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "course_image", bundle: ..., traitCollection: ...)`
    static func course_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.course_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "delete_image", bundle: ..., traitCollection: ...)`
    static func delete_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delete_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "diamond_black", bundle: ..., traitCollection: ...)`
    static func diamond_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.diamond_black, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "diamond_blue", bundle: ..., traitCollection: ...)`
    static func diamond_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.diamond_blue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "diamond_gray", bundle: ..., traitCollection: ...)`
    static func diamond_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.diamond_gray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "diamond_red", bundle: ..., traitCollection: ...)`
    static func diamond_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.diamond_red, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "diamond_yellow", bundle: ..., traitCollection: ...)`
    static func diamond_yellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.diamond_yellow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "down_arrow", bundle: ..., traitCollection: ...)`
    static func down_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.down_arrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "extract_icon", bundle: ..., traitCollection: ...)`
    static func extract_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.extract_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "eye_close", bundle: ..., traitCollection: ...)`
    static func eye_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eye_close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "eye_open", bundle: ..., traitCollection: ...)`
    static func eye_open(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eye_open, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home_eight", bundle: ..., traitCollection: ...)`
    static func home_eight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_eight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home_five", bundle: ..., traitCollection: ...)`
    static func home_five(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_five, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home_four", bundle: ..., traitCollection: ...)`
    static func home_four(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_four, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home_icon", bundle: ..., traitCollection: ...)`
    static func home_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home_icon_select", bundle: ..., traitCollection: ...)`
    static func home_icon_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_icon_select, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home_nine", bundle: ..., traitCollection: ...)`
    static func home_nine(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_nine, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home_one", bundle: ..., traitCollection: ...)`
    static func home_one(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_one, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home_seven", bundle: ..., traitCollection: ...)`
    static func home_seven(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_seven, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home_six", bundle: ..., traitCollection: ...)`
    static func home_six(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_six, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home_three", bundle: ..., traitCollection: ...)`
    static func home_three(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_three, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home_two", bundle: ..., traitCollection: ...)`
    static func home_two(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_two, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mine_icon", bundle: ..., traitCollection: ...)`
    static func mine_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mine_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mine_icon_select", bundle: ..., traitCollection: ...)`
    static func mine_icon_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mine_icon_select, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mine_password_icon", bundle: ..., traitCollection: ...)`
    static func mine_password_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mine_password_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nav_back", bundle: ..., traitCollection: ...)`
    static func nav_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nav_back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "notice_icon", bundle: ..., traitCollection: ...)`
    static func notice_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notice_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "password_icon", bundle: ..., traitCollection: ...)`
    static func password_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.password_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "phone_icon", bundle: ..., traitCollection: ...)`
    static func phone_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.phone_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qr_code_bg", bundle: ..., traitCollection: ...)`
    static func qr_code_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qr_code_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qr_code_desc", bundle: ..., traitCollection: ...)`
    static func qr_code_desc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qr_code_desc, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "receive_task", bundle: ..., traitCollection: ...)`
    static func receive_task(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.receive_task, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "record_task", bundle: ..., traitCollection: ...)`
    static func record_task(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.record_task, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "right_arrow", bundle: ..., traitCollection: ...)`
    static func right_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.right_arrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "select_icon", bundle: ..., traitCollection: ...)`
    static func select_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.select_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "setup_icon", bundle: ..., traitCollection: ...)`
    static func setup_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.setup_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "submit_task", bundle: ..., traitCollection: ...)`
    static func submit_task(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.submit_task, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "task_green", bundle: ..., traitCollection: ...)`
    static func task_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.task_green, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "task_icon", bundle: ..., traitCollection: ...)`
    static func task_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.task_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "task_icon_select", bundle: ..., traitCollection: ...)`
    static func task_icon_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.task_icon_select, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "task_image", bundle: ..., traitCollection: ...)`
    static func task_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.task_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "team_con", bundle: ..., traitCollection: ...)`
    static func team_con(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.team_con, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "unselect_icon", bundle: ..., traitCollection: ...)`
    static func unselect_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unselect_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "user_icon", bundle: ..., traitCollection: ...)`
    static func user_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "weChat_icon", bundle: ..., traitCollection: ...)`
    static func weChat_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.weChat_icon, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `IncomeListTableViewCell`.
    static let incomeListTableViewCell = _R.nib._IncomeListTableViewCell()
    /// Nib `SubmitTaskCollectionViewCell`.
    static let submitTaskCollectionViewCell = _R.nib._SubmitTaskCollectionViewCell()
    /// Nib `TeamListTableViewCell`.
    static let teamListTableViewCell = _R.nib._TeamListTableViewCell()
    
    /// `UINib(name: "IncomeListTableViewCell", in: bundle)`
    static func incomeListTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.incomeListTableViewCell)
    }
    
    /// `UINib(name: "SubmitTaskCollectionViewCell", in: bundle)`
    static func submitTaskCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.submitTaskCollectionViewCell)
    }
    
    /// `UINib(name: "TeamListTableViewCell", in: bundle)`
    static func teamListTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.teamListTableViewCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 14 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AddressListTableViewCell`.
    static let addressListTableViewCell: Rswift.ReuseIdentifier<AddressListTableViewCell> = Rswift.ReuseIdentifier(identifier: "AddressListTableViewCell")
    /// Reuse identifier `CurrentVipTableViewCell`.
    static let currentVipTableViewCell: Rswift.ReuseIdentifier<CurrentVipTableViewCell> = Rswift.ReuseIdentifier(identifier: "CurrentVipTableViewCell")
    /// Reuse identifier `ExtractListTableViewCell`.
    static let extractListTableViewCell: Rswift.ReuseIdentifier<ExtractListTableViewCell> = Rswift.ReuseIdentifier(identifier: "ExtractListTableViewCell")
    /// Reuse identifier `HomeCollectionReusableView`.
    static let homeCollectionReusableView: Rswift.ReuseIdentifier<HomeCollectionReusableView> = Rswift.ReuseIdentifier(identifier: "HomeCollectionReusableView")
    /// Reuse identifier `HomeCollectionViewCell`.
    static let homeCollectionViewCell: Rswift.ReuseIdentifier<HomeCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "HomeCollectionViewCell")
    /// Reuse identifier `IncomeListTableViewCell`.
    static let incomeListTableViewCell: Rswift.ReuseIdentifier<IncomeListTableViewCell> = Rswift.ReuseIdentifier(identifier: "IncomeListTableViewCell")
    /// Reuse identifier `MineTableViewCell`.
    static let mineTableViewCell: Rswift.ReuseIdentifier<MineTableViewCell> = Rswift.ReuseIdentifier(identifier: "MineTableViewCell")
    /// Reuse identifier `MyTaskTableViewCell`.
    static let myTaskTableViewCell: Rswift.ReuseIdentifier<MyTaskTableViewCell> = Rswift.ReuseIdentifier(identifier: "MyTaskTableViewCell")
    /// Reuse identifier `SubmitTaskCollectionViewCell`.
    static let submitTaskCollectionViewCell: Rswift.ReuseIdentifier<SubmitTaskCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "SubmitTaskCollectionViewCell")
    /// Reuse identifier `TaskDetailTableViewCell`.
    static let taskDetailTableViewCell: Rswift.ReuseIdentifier<TaskDetailTableViewCell> = Rswift.ReuseIdentifier(identifier: "TaskDetailTableViewCell")
    /// Reuse identifier `TaskListTableViewCell`.
    static let taskListTableViewCell: Rswift.ReuseIdentifier<TaskListTableViewCell> = Rswift.ReuseIdentifier(identifier: "TaskListTableViewCell")
    /// Reuse identifier `TaskRecordTableViewCell`.
    static let taskRecordTableViewCell: Rswift.ReuseIdentifier<TaskRecordTableViewCell> = Rswift.ReuseIdentifier(identifier: "TaskRecordTableViewCell")
    /// Reuse identifier `TeamListTableViewCell`.
    static let teamListTableViewCell: Rswift.ReuseIdentifier<TeamListTableViewCell> = Rswift.ReuseIdentifier(identifier: "TeamListTableViewCell")
    /// Reuse identifier `VipTableViewCell`.
    static let vipTableViewCell: Rswift.ReuseIdentifier<VipTableViewCell> = Rswift.ReuseIdentifier(identifier: "VipTableViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 18 view controllers.
  struct segue {
    /// This struct is generated for `AddressListViewController`, and contains static references to 1 segues.
    struct addressListViewController {
      /// Segue identifier `AddAddress`.
      static let addAddress: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AddressListViewController, AddAddressViewController> = Rswift.StoryboardSegueIdentifier(identifier: "AddAddress")
      
      /// Optionally returns a typed version of segue `AddAddress`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func addAddress(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AddressListViewController, AddAddressViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.addressListViewController.addAddress, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `AssetsListViewController`, and contains static references to 3 segues.
    struct assetsListViewController {
      /// Segue identifier `Calendar`.
      static let calendar: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AssetsListViewController, CalendarViewController> = Rswift.StoryboardSegueIdentifier(identifier: "Calendar")
      /// Segue identifier `ExtractDetail`.
      static let extractDetail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AssetsListViewController, ExtractDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ExtractDetail")
      /// Segue identifier `IncomeDetail`.
      static let incomeDetail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AssetsListViewController, IncomeDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "IncomeDetail")
      
      /// Optionally returns a typed version of segue `Calendar`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func calendar(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AssetsListViewController, CalendarViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.assetsListViewController.calendar, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ExtractDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func extractDetail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AssetsListViewController, ExtractDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.assetsListViewController.extractDetail, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `IncomeDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func incomeDetail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AssetsListViewController, IncomeDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.assetsListViewController.incomeDetail, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `ExtractListViewController`, and contains static references to 2 segues.
    struct extractListViewController {
      /// Segue identifier `Calendar`.
      static let calendar: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ExtractListViewController, CalendarViewController> = Rswift.StoryboardSegueIdentifier(identifier: "Calendar")
      /// Segue identifier `ExtractDetail`.
      static let extractDetail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ExtractListViewController, ExtractDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ExtractDetail")
      
      /// Optionally returns a typed version of segue `Calendar`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func calendar(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ExtractListViewController, CalendarViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.extractListViewController.calendar, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ExtractDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func extractDetail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ExtractListViewController, ExtractDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.extractListViewController.extractDetail, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `ExtractViewController`, and contains static references to 1 segues.
    struct extractViewController {
      /// Segue identifier `ExtractDetail`.
      static let extractDetail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ExtractViewController, ExtractDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ExtractDetail")
      
      /// Optionally returns a typed version of segue `ExtractDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func extractDetail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ExtractViewController, ExtractDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.extractViewController.extractDetail, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `HomeViewController`, and contains static references to 6 segues.
    struct homeViewController {
      /// Segue identifier `Commission`.
      static let commission: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeViewController, CommissionViewController> = Rswift.StoryboardSegueIdentifier(identifier: "Commission")
      /// Segue identifier `Course`.
      static let course: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeViewController, LuanViewController> = Rswift.StoryboardSegueIdentifier(identifier: "Course")
      /// Segue identifier `CustomerService`.
      static let customerService: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeViewController, CustomerServiceViewController> = Rswift.StoryboardSegueIdentifier(identifier: "CustomerService")
      /// Segue identifier `Payment`.
      static let payment: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeViewController, PaymentViewController> = Rswift.StoryboardSegueIdentifier(identifier: "Payment")
      /// Segue identifier `QRCode`.
      static let qrCode: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeViewController, QRCodeViewController> = Rswift.StoryboardSegueIdentifier(identifier: "QRCode")
      /// Segue identifier `Vip`.
      static let vip: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeViewController, VipViewController> = Rswift.StoryboardSegueIdentifier(identifier: "Vip")
      
      /// Optionally returns a typed version of segue `Commission`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func commission(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeViewController, CommissionViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeViewController.commission, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `Course`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func course(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeViewController, LuanViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeViewController.course, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `CustomerService`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func customerService(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeViewController, CustomerServiceViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeViewController.customerService, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `Payment`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func payment(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeViewController, PaymentViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeViewController.payment, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `QRCode`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func qrCode(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeViewController, QRCodeViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeViewController.qrCode, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `Vip`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func vip(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeViewController, VipViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeViewController.vip, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `IncomeListViewController`, and contains static references to 2 segues.
    struct incomeListViewController {
      /// Segue identifier `Calendar`.
      static let calendar: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, IncomeListViewController, CalendarViewController> = Rswift.StoryboardSegueIdentifier(identifier: "Calendar")
      /// Segue identifier `IncomeDetail`.
      static let incomeDetail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, IncomeListViewController, IncomeDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "IncomeDetail")
      
      /// Optionally returns a typed version of segue `Calendar`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func calendar(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, IncomeListViewController, CalendarViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.incomeListViewController.calendar, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `IncomeDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func incomeDetail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, IncomeListViewController, IncomeDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.incomeListViewController.incomeDetail, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `InfoViewController`, and contains static references to 1 segues.
    struct infoViewController {
      /// Segue identifier `EditName`.
      static let editName: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, InfoViewController, EditNameViewController> = Rswift.StoryboardSegueIdentifier(identifier: "EditName")
      
      /// Optionally returns a typed version of segue `EditName`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func editName(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, InfoViewController, EditNameViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.infoViewController.editName, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `LoginViewController`, and contains static references to 2 segues.
    struct loginViewController {
      /// Segue identifier `Forget`.
      static let forget: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, LoginViewController, RegisterViewController> = Rswift.StoryboardSegueIdentifier(identifier: "Forget")
      /// Segue identifier `Register`.
      static let register: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, LoginViewController, RegisterViewController> = Rswift.StoryboardSegueIdentifier(identifier: "Register")
      
      /// Optionally returns a typed version of segue `Forget`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func forget(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, LoginViewController, RegisterViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.loginViewController.forget, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `Register`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func register(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, LoginViewController, RegisterViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.loginViewController.register, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MineViewController`, and contains static references to 12 segues.
    struct mineViewController {
      /// Segue identifier `AddressList`.
      static let addressList: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MineViewController, AddressListViewController> = Rswift.StoryboardSegueIdentifier(identifier: "AddressList")
      /// Segue identifier `AssetsList`.
      static let assetsList: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MineViewController, AssetsListViewController> = Rswift.StoryboardSegueIdentifier(identifier: "AssetsList")
      /// Segue identifier `BindAlipay`.
      static let bindAlipay: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MineViewController, BindAlipayViewController> = Rswift.StoryboardSegueIdentifier(identifier: "BindAlipay")
      /// Segue identifier `ExtractList`.
      static let extractList: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MineViewController, ExtractListViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ExtractList")
      /// Segue identifier `Extract`.
      static let extract: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MineViewController, ExtractViewController> = Rswift.StoryboardSegueIdentifier(identifier: "Extract")
      /// Segue identifier `IncomeList`.
      static let incomeList: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MineViewController, IncomeListViewController> = Rswift.StoryboardSegueIdentifier(identifier: "IncomeList")
      /// Segue identifier `Info`.
      static let info: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MineViewController, InfoViewController> = Rswift.StoryboardSegueIdentifier(identifier: "Info")
      /// Segue identifier `MyAlipay`.
      static let myAlipay: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MineViewController, MyAlipayViewController> = Rswift.StoryboardSegueIdentifier(identifier: "MyAlipay")
      /// Segue identifier `PasswordManage`.
      static let passwordManage: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MineViewController, PasswordManageTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "PasswordManage")
      /// Segue identifier `Setup`.
      static let setup: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MineViewController, SetupViewController> = Rswift.StoryboardSegueIdentifier(identifier: "Setup")
      /// Segue identifier `TeamList`.
      static let teamList: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MineViewController, TeamListViewController> = Rswift.StoryboardSegueIdentifier(identifier: "TeamList")
      /// Segue identifier `TodayIncome`.
      static let todayIncome: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MineViewController, IncomeListViewController> = Rswift.StoryboardSegueIdentifier(identifier: "TodayIncome")
      
      /// Optionally returns a typed version of segue `AddressList`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func addressList(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MineViewController, AddressListViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mineViewController.addressList, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `AssetsList`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func assetsList(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MineViewController, AssetsListViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mineViewController.assetsList, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `BindAlipay`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func bindAlipay(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MineViewController, BindAlipayViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mineViewController.bindAlipay, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ExtractList`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func extractList(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MineViewController, ExtractListViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mineViewController.extractList, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `Extract`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func extract(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MineViewController, ExtractViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mineViewController.extract, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `IncomeList`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func incomeList(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MineViewController, IncomeListViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mineViewController.incomeList, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `Info`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func info(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MineViewController, InfoViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mineViewController.info, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `MyAlipay`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func myAlipay(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MineViewController, MyAlipayViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mineViewController.myAlipay, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `PasswordManage`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func passwordManage(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MineViewController, PasswordManageTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mineViewController.passwordManage, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `Setup`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func setup(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MineViewController, SetupViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mineViewController.setup, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `TeamList`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func teamList(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MineViewController, TeamListViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mineViewController.teamList, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `TodayIncome`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func todayIncome(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MineViewController, IncomeListViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mineViewController.todayIncome, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MyAlipayViewController`, and contains static references to 1 segues.
    struct myAlipayViewController {
      /// Segue identifier `UnBindAlipay`.
      static let unBindAlipay: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyAlipayViewController, UnBindAlipayViewController> = Rswift.StoryboardSegueIdentifier(identifier: "UnBindAlipay")
      
      /// Optionally returns a typed version of segue `UnBindAlipay`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func unBindAlipay(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyAlipayViewController, UnBindAlipayViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myAlipayViewController.unBindAlipay, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MyTaskViewController`, and contains static references to 1 segues.
    struct myTaskViewController {
      /// Segue identifier `SubmitTask`.
      static let submitTask: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyTaskViewController, SubmitTaskViewController> = Rswift.StoryboardSegueIdentifier(identifier: "SubmitTask")
      
      /// Optionally returns a typed version of segue `SubmitTask`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func submitTask(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyTaskViewController, SubmitTaskViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myTaskViewController.submitTask, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `PasswordManageTableViewController`, and contains static references to 2 segues.
    struct passwordManageTableViewController {
      /// Segue identifier `LoginPassword`.
      static let loginPassword: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, PasswordManageTableViewController, PasswordViewController> = Rswift.StoryboardSegueIdentifier(identifier: "LoginPassword")
      /// Segue identifier `PaymentPassword`.
      static let paymentPassword: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, PasswordManageTableViewController, PasswordViewController> = Rswift.StoryboardSegueIdentifier(identifier: "PaymentPassword")
      
      /// Optionally returns a typed version of segue `LoginPassword`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func loginPassword(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, PasswordManageTableViewController, PasswordViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.passwordManageTableViewController.loginPassword, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `PaymentPassword`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func paymentPassword(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, PasswordManageTableViewController, PasswordViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.passwordManageTableViewController.paymentPassword, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `RegisterViewController`, and contains static references to 2 segues.
    struct registerViewController {
      /// Segue identifier `SetupPassword`.
      static let setupPassword: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, RegisterViewController, SetupPasswordViewController> = Rswift.StoryboardSegueIdentifier(identifier: "SetupPassword")
      /// Segue identifier `UpdatePassword`.
      static let updatePassword: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, RegisterViewController, UpdatePasswordViewController> = Rswift.StoryboardSegueIdentifier(identifier: "UpdatePassword")
      
      /// Optionally returns a typed version of segue `SetupPassword`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func setupPassword(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, RegisterViewController, SetupPasswordViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.registerViewController.setupPassword, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `UpdatePassword`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func updatePassword(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, RegisterViewController, UpdatePasswordViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.registerViewController.updatePassword, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SetupViewController`, and contains static references to 2 segues.
    struct setupViewController {
      /// Segue identifier `About`.
      static let about: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SetupViewController, AboutViewController> = Rswift.StoryboardSegueIdentifier(identifier: "About")
      /// Segue identifier `Feedback`.
      static let feedback: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SetupViewController, FeedbackViewController> = Rswift.StoryboardSegueIdentifier(identifier: "Feedback")
      
      /// Optionally returns a typed version of segue `About`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func about(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SetupViewController, AboutViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.setupViewController.about, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `Feedback`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func feedback(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SetupViewController, FeedbackViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.setupViewController.feedback, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `TaskListViewController`, and contains static references to 1 segues.
    struct taskListViewController {
      /// Segue identifier `TaskDetail`.
      static let taskDetail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TaskListViewController, TaskDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "TaskDetail")
      
      /// Optionally returns a typed version of segue `TaskDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func taskDetail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TaskListViewController, TaskDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.taskListViewController.taskDetail, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `TaskViewController`, and contains static references to 3 segues.
    struct taskViewController {
      /// Segue identifier `MyTask`.
      static let myTask: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TaskViewController, MyTaskViewController> = Rswift.StoryboardSegueIdentifier(identifier: "MyTask")
      /// Segue identifier `TaskList`.
      static let taskList: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TaskViewController, TaskListViewController> = Rswift.StoryboardSegueIdentifier(identifier: "TaskList")
      /// Segue identifier `TaskRecord`.
      static let taskRecord: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TaskViewController, TaskRecordViewController> = Rswift.StoryboardSegueIdentifier(identifier: "TaskRecord")
      
      /// Optionally returns a typed version of segue `MyTask`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func myTask(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TaskViewController, MyTaskViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.taskViewController.myTask, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `TaskList`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func taskList(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TaskViewController, TaskListViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.taskViewController.taskList, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `TaskRecord`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func taskRecord(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TaskViewController, TaskRecordViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.taskViewController.taskRecord, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `TeamListViewController`, and contains static references to 1 segues.
    struct teamListViewController {
      /// Segue identifier `TeamDetail`.
      static let teamDetail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TeamListViewController, TeamDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "TeamDetail")
      
      /// Optionally returns a typed version of segue `TeamDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func teamDetail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TeamListViewController, TeamDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.teamListViewController.teamDetail, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `VipViewController`, and contains static references to 1 segues.
    struct vipViewController {
      /// Segue identifier `Payment`.
      static let payment: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, VipViewController, PaymentViewController> = Rswift.StoryboardSegueIdentifier(identifier: "Payment")
      
      /// Optionally returns a typed version of segue `Payment`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func payment(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, VipViewController, PaymentViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.vipViewController.payment, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 5 storyboards.
  struct storyboard {
    /// Storyboard `Home`.
    static let home = _R.storyboard.home()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    /// Storyboard `Mine`.
    static let mine = _R.storyboard.mine()
    /// Storyboard `Task`.
    static let task = _R.storyboard.task()
    
    /// `UIStoryboard(name: "Home", bundle: ...)`
    static func home(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.home)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.login)
    }
    
    /// `UIStoryboard(name: "Mine", bundle: ...)`
    static func mine(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mine)
    }
    
    /// `UIStoryboard(name: "Task", bundle: ...)`
    static func task(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.task)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _TeamListTableViewCell.validate()
      try _SubmitTaskCollectionViewCell.validate()
    }
    
    struct _IncomeListTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = IncomeListTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "IncomeListTableViewCell"
      let name = "IncomeListTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> IncomeListTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IncomeListTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _SubmitTaskCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SubmitTaskCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "SubmitTaskCollectionViewCell"
      let name = "SubmitTaskCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SubmitTaskCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SubmitTaskCollectionViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "delete_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'delete_image' is used in nib 'SubmitTaskCollectionViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "add_photo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'add_photo' is used in nib 'SubmitTaskCollectionViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _TeamListTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = TeamListTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "TeamListTableViewCell"
      let name = "TeamListTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TeamListTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TeamListTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "diamond_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'diamond_gray' is used in nib 'TeamListTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try login.validate()
      try home.validate()
      try mine.validate()
      try task.validate()
    }
    
    struct home: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LuanNavigationController
      
      let bundle = R.hostingBundle
      let name = "Home"
      let paymentViewController = StoryboardViewControllerResource<PaymentViewController>(identifier: "PaymentViewController")
      let vipViewController = StoryboardViewControllerResource<VipViewController>(identifier: "VipViewController")
      
      func paymentViewController(_: Void = ()) -> PaymentViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: paymentViewController)
      }
      
      func vipViewController(_: Void = ()) -> VipViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: vipViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "notice_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'notice_icon' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "phone_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'phone_icon' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "qr_code_desc") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qr_code_desc' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "diamond_red") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'diamond_red' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "course_image") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'course_image' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "commission") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'commission' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "qr_code_bg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qr_code_bg' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "weChat_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'weChat_icon' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "clock_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'clock_icon' is used in storyboard 'Home', but couldn't be loaded.") }
        if _R.storyboard.home().vipViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'vipViewController' could not be loaded from storyboard 'Home' as 'VipViewController'.") }
        if _R.storyboard.home().paymentViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'paymentViewController' could not be loaded from storyboard 'Home' as 'PaymentViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct login: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LuanNavigationController
      
      let bundle = R.hostingBundle
      let name = "Login"
      
      static func validate() throws {
        if UIKit.UIImage(named: "eye_open") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'eye_open' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "password_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'password_icon' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "eye_close") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'eye_close' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user_icon' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "about_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'about_icon' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "unselect_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'unselect_icon' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "select_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'select_icon' is used in storyboard 'Login', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct mine: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LuanNavigationController
      
      let bundle = R.hostingBundle
      let name = "Mine"
      
      static func validate() throws {
        if UIKit.UIImage(named: "select_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'select_icon' is used in storyboard 'Mine', but couldn't be loaded.") }
        if UIKit.UIImage(named: "team_con") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'team_con' is used in storyboard 'Mine', but couldn't be loaded.") }
        if UIKit.UIImage(named: "about_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'about_icon' is used in storyboard 'Mine', but couldn't be loaded.") }
        if UIKit.UIImage(named: "down_arrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'down_arrow' is used in storyboard 'Mine', but couldn't be loaded.") }
        if UIKit.UIImage(named: "alipay_icon-1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'alipay_icon-1' is used in storyboard 'Mine', but couldn't be loaded.") }
        if UIKit.UIImage(named: "right_arrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'right_arrow' is used in storyboard 'Mine', but couldn't be loaded.") }
        if UIKit.UIImage(named: "diamond_gray") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'diamond_gray' is used in storyboard 'Mine', but couldn't be loaded.") }
        if UIKit.UIImage(named: "calendar") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'calendar' is used in storyboard 'Mine', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct task: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LuanNavigationController
      
      let bundle = R.hostingBundle
      let name = "Task"
      
      static func validate() throws {
        if UIKit.UIImage(named: "receive_task") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'receive_task' is used in storyboard 'Task', but couldn't be loaded.") }
        if UIKit.UIImage(named: "record_task") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'record_task' is used in storyboard 'Task', but couldn't be loaded.") }
        if UIKit.UIImage(named: "submit_task") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'submit_task' is used in storyboard 'Task', but couldn't be loaded.") }
        if UIKit.UIImage(named: "down_arrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'down_arrow' is used in storyboard 'Task', but couldn't be loaded.") }
        if UIKit.UIImage(named: "task_green") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'task_green' is used in storyboard 'Task', but couldn't be loaded.") }
        if UIKit.UIImage(named: "task_image") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'task_image' is used in storyboard 'Task', but couldn't be loaded.") }
        if UIKit.UIImage(named: "right_arrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'right_arrow' is used in storyboard 'Task', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
